//此文件由Christmas根据xxxAction.json生成，请不要手动修改
//This file is generated by Christmas according to xxxAction.json. Please do not modify it manually
import * as Tools from "/Code/Common/Tools/Tools.js"
import Logger from "/Code/Common/Logger/Logger.js"
import ErrorCode from "/Code/Common/ErrorCode/ErrorCode.js"
import * as Module from "/Code/Module/Module"

async function Start(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action Start start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$value": [{"_config>>_value": "Stop Refactoring"}, {"_config>>_value": "3"}, {"_config>>_value": "software engineer"}, {"_config>>_value": "We have been exploring the system architecture of medium and large cloud computing websites, and strive to make the website system have higher software quality and higher development efficiency at a lower cost."}, {}]}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_id": "comp##_PackForm<<Form", "_config": {"_map": "get##$value"}}
            result = await Module._BrokerUI(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_action": "lang listen", "_call": "act##LanguageNotify"}
            result = await Module._OperTrick(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_action": "theme listen", "_call": "act##ThemeNotify"}
            result = await Module._OperTrick(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action Start end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##Start", Start);

async function Commit(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action Commit start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$result": [{}, {"_templ": "name"}, {"_templ": "get##name"}, {"_templ": "age"}, {"_templ": "get##age"}, {"_templ": "occupation"}, {"_templ": "get##occupation"}, {"_templ": "introduction"}, {"_templ": "get##introduction"}]}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_id": "comp##_BoxGrid<<Dialog", "_config": {"_map": "get##$result"}}
            result = await Module._BrokerUI(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_id": "comp##_BoxDialog<<Start", "_config": {"_isOpen": true}}
            result = await Module._BrokerUI(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action Commit end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##Commit", Commit);

async function LanguageChange(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action LanguageChange start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$lang": "get##_isAble", "switch##$lang": {"true": "en", "false": "def"}}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_action": "lang change", "_language": "get##$lang"}
            result = await Module._OperTrick(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action LanguageChange end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##LanguageChange", LanguageChange);

async function LanguageNotify(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action LanguageNotify start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$isAble": "get##lang", "switch##$isAble": {"en": true, "def": false}}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_id": "comp##_CompSwitch<<Language", "_config": {"_isAble": "get##$isAble"}}
            result = await Module._BrokerUI(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action LanguageNotify end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##LanguageNotify", LanguageNotify);

async function ThemeChange(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action ThemeChange start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$theme": "get##_isAble", "switch##$theme": {"true": "dark", "false": ""}}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_action": "theme change", "_theme": "get##$theme"}
            result = await Module._OperTrick(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action ThemeChange end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##ThemeChange", ThemeChange);

async function ThemeNotify(data={}){
    //STEP::Init data pool
    let result = ErrorCode.ERR_OK;
    let moduleParam = {};
    const passParam = Tools.ObjectClone(data);
    const selectorRetryData = [];
    console.debug(Logger.Header(), "Action ThemeNotify start, moduleParam:", moduleParam, "passParam:", passParam);

    try{
        //STEP::Run task
        do{
            //STEP-IN::Call Module
            moduleParam = {"_setting": {"$isAble": "get##theme", "switch##$isAble": {"dark": true, "": false}}}
            result = await Module._DataFilling(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
            //STEP-IN::Call Module
            moduleParam = {"_id": "comp##_CompSwitch<<Theme", "_config": {"_isAble": "get##$isAble"}}
            result = await Module._BrokerUI(moduleParam, passParam);
            if(ErrorCode.IsError(result, [
               
            ])){
                continue;
            }
            
        }while(false);
    } finally {
        console.debug(Logger.Header(), "Action ThemeNotify end, result:", result , "passParam:", passParam);
    }
    return result;
}
Tools.PubSubListen("act##ThemeNotify", ThemeNotify);

try{Start();}catch(e){}